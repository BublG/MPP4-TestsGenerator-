using System.Linq;
using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsGeneratorLibrary
{
    public class TestsGenerator
    {
        public List<TestClass> GenerateTestClasses(string sourceCode)
        {
            var result = new List<TestClass>();
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
            List<ClassDeclarationSyntax> classes = syntaxTree.GetRoot().DescendantNodes()
                .OfType<ClassDeclarationSyntax>().ToList();

            int index = 0;
            foreach (var classDeclaration in classes)
            {
                List<MethodDeclarationSyntax> methods = classDeclaration.DescendantNodes()
                    .OfType<MethodDeclarationSyntax>().ToList()
                    .Where(method => method.Modifiers.ToList().Any(token => token.Text != "private")).ToList();

                if (methods.Count != 0)
                {
                    result.Add(new TestClass());
                    result[index].FileName = classDeclaration.Identifier.ValueText + "Test.cs";

                    result[index].SourceCode += "using NUnit.Framework;\n";
                    result[index].SourceCode += "\n";
                    result[index].SourceCode += "namespace GeneratedTests\n";
                    result[index].SourceCode += "{\n";
                    result[index].SourceCode += "\tpublic class " + classDeclaration.Identifier.ValueText + "Test";
                    result[index].SourceCode += "\t{\n";

                    foreach (var method in methods)
                    {
                        result[index].SourceCode += "\t\t[Test]\n";
                        result[index].SourceCode += "\t\tpublic void " + method.Identifier + "()" + "\n";
                        result[index].SourceCode += "\t\t{\n";
                        result[index].SourceCode += "\t\t\tAssert.Fail(\"autogenerated\");\n";
                        result[index].SourceCode += "\t\t}\n";
                        result[index].SourceCode += "\t\t\n";
                    }

                    result[index].SourceCode += "\t}\n}\n";
                    index += 1;
                }
            }
            
            return result;
        }
    }
}